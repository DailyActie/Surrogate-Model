from surrogate.files.delft3d import Delft3D

# icase = 's00'
# iseg=0
# ivar=0
# itime=0

icase = 's00'
# icase = 's01'
# iseg=4011
iseg=10011
ivar=79 # 79	GREENS
itime=31

filename = '../../../examples/files/'+icase+'-algaebloom_original.map'
# filename = '../../../examples/files/s01-algaebloom_original.map'

print 'Start\ntest_delft3d'

d3d = Delft3D(fileName=filename)
moname,varlist,maptime,nseg,nvar,ntime = d3d.readWaqMapInit()
print 'data size: [nseg='+str(nseg)+',nvar='+str(nvar)+',ntime='+str(ntime)+']'

for i in range(len(varlist)):
    print str(i)+'\t'+varlist[i]
maptime = [x/(24*3600) for x in maptime]
for i in range(len(maptime)):
    print str(i)+'\t'+str(maptime[i])

if iseg>nseg:
    print 'Error: iseg='+str(iseg)+' > nseg='+str(nseg)
if ivar>nvar:
    print 'Error: ivar='+str(ivar)+' > nvar='+str(nvar)
if itime>ntime:
    print 'Error: itime='+str(itime)+' > ntime='+str(ntime)

# dataOffset = d3d.readWaqMapDataAtOffset(iseg=iseg,ivar=ivar,itime=itime) # ok
# print dataOffset
# # 0.503802478313
#
# dataTime = d3d.readWaqMapDataAtTime(itime=itime) # ok
# print dataTime[iseg][ivar][0]
# # 0.503802478313

dataSeg = d3d.readWaqMapDataAtSegment(iseg=iseg) # ok
print dataSeg[0][ivar][itime]
plotdata = dataSeg[0][ivar][:]
# 0.503802478313
# print dataSeg[0][ivar][:]
# [0.6013299822807312, 0.5702563524246216, 0.5401511788368225, 0.503802478313446, 0.4728724956512451, 0.4469988942146301, 0.4246392548084259, 0.4036324620246887, 0.3829262852668762, 0.3626249432563782, 0.3430309593677521, 0.3245018720626831, 0.3069453537464142, 0.2902730703353882, 0.2744538486003876, 0.2594083547592163, 0.24513202905654907, 0.23154398798942566, 0.2186923325061798, 0.20646995306015015, 0.19489523768424988, 0.1840439736843109, 0.17373421788215637, 0.1639062464237213, 0.15454551577568054, 0.14486530423164368, 0.13669444620609283, 0.1288989931344986, 0.12146954238414764, 0.11456318199634552, 0.10781973600387573, 0.10135664790868759, 0.0951852798461914, 0.08929856866598129, 0.08368173241615295, 0.07832273840904236, 0.073222316801548, 0.06838387995958328, 0.06380292028188705, 0.05946691334247589, 0.055361729115247726, 0.05147542431950569, 0.04776716232299805, 0.04426559433341026, 0.04097570851445198, 0.03788607567548752, 0.03498908132314682, 0.03228077292442322, 0.029757846146821976, 0.02741534821689129, 0.02524563856422901, 0.02323875017464161, 0.02135307528078556, 0.019624879583716393, 0.018043028190732002, 0.016590243205428123, 0.015253722667694092, 0.01402253657579422, 0.012886269949376583, 0.023018809035420418, 0.02688433788716793, 0.03349993750452995, 0.04440329968929291, 0.063551165163517, 0.10461793094873428, 0.19884467124938965, 0.4173647463321686, 0.3784586191177368, 0.3358108103275299, 0.28983786702156067, 0.2503114342689514, 0.2186971753835678, 0.19189321994781494, 0.16800573468208313, 0.14725902676582336, 0.12875454127788544, 0.11232475191354752, 0.09765993803739548, 0.08449932932853699, 0.0726800411939621, 0.06213885918259621, 0.052872687578201294, 0.044921666383743286, 0.03825629502534866, 0.032655809074640274, 0.02792053110897541, 0.023867949843406677, 0.046834155917167664, 0.08981742709875107, 0.1654300093650818, 0.31661030650138855, 0.4930227994918823, 0.6608158946037292, 0.8037514090538025, 0.9223926067352295, 1.0236036777496338, 1.1117881536483765, 1.189678430557251, 1.2595171928405762, 1.3232439756393433, 1.3821684122085571, 1.4369632005691528, 1.4864617586135864, 1.5311167240142822, 1.5720020532608032, 1.6040951013565063, 1.6301418542861938, 1.6491233110427856, 1.664941430091858, 1.6780588626861572, 1.6885061264038086, 1.6969019174575806, 1.7023577690124512, 1.7053660154342651, 1.7060858011245728, 1.704392910003662, 1.700285792350769, 1.6939176321029663, 1.651973009109497, 1.5950154066085815, 1.4950858354568481, 1.2635228633880615, 1.0112193822860718, 1.0640560388565063, 1.0983364582061768, 1.1183191537857056, 1.1274276971817017, 1.1283302307128906, 1.1231391429901123, 1.1134306192398071, 1.1003187894821167, 1.0845776796340942, 1.071732521057129, 1.0569288730621338, 1.0398000478744507, 1.0232192277908325, 1.010857105255127, 1.001200556755066, 0.9931233525276184, 0.6720030307769775, 0.4542151987552643, 0.31761711835861206, 0.22446410357952118, 0.15640205144882202, 0.10860186070203781, 0.07535219937562943, 0.05208498612046242, 0.03568442538380623, 0.024197984486818314, 0.016268528997898102, 0.010851454921066761, 0.00717611750587821, 0.004704298917204142, 0.0030468706972897053, 0.0019507224205881357, 0.0012362739071249962, 3.963619016333908e-11, -3.463514333191045e-15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2065401589221878e-11, 7.420708492134054e-11, 0.06161365285515785, 0.21908199787139893, 0.7319381237030029, 1.088305115699768, 1.313007116317749, 1.4052866697311401, 1.4776884317398071, 1.5313694477081299, 1.5641963481903076, 1.587206482887268, 1.6026510000228882, 1.6135740280151367, 1.6207910776138306, 1.6240403652191162, 1.6233066320419312, 1.6187620162963867, 1.610706090927124, 1.599424123764038, 1.5862804651260376, 1.5701651573181152, 1.5538867712020874, 1.5384687185287476, 1.5241055488586426, 1.5107810497283936, 1.4922434091567993, 1.473584771156311, 1.453205943107605, 1.429883360862732, 1.4027976989746094, 1.3792203664779663, 1.354729175567627, 1.328302025794983, 1.3013767004013062, 1.2753864526748657, 1.2511941194534302, 1.229217767715454, 1.2096147537231445, 1.1924583911895752, 1.1776680946350098, 1.1672425270080566, 1.1586486101150513, 1.151837706565857, 1.1471854448318481, 1.1450574398040771, 1.1454488039016724, 1.1484365463256836, 1.1538888216018677, 1.1616812944412231, 1.1714727878570557, 1.1829302310943604, 1.1966137886047363, 1.2104203701019287, 1.1923398971557617, 1.1756454706192017, 1.1350358724594116, 1.0604249238967896, 0.9322526454925537, 0.7734287977218628, 0.6368368864059448, 0.5196176767349243, 0.4249676465988159, 0.3563590347766876, 0.3079663813114166, 0.26941806077957153, 0.2372927963733673, 0.20986908674240112, 0.18318289518356323, 0.15814821422100067, 0.1377444565296173, 0.12073207646608353, 0.126420795917511, 0.21199306845664978, 0.286668986082077, 0.3499804735183716, 0.4058406949043274, 0.4543895125389099, 0.4989174008369446, 0.5378865003585815, 0.5391600131988525, 0.5518753528594971, 0.5574814677238464, 0.542118489742279, 0.5339130163192749, 0.520254909992218, 0.4890962541103363, 0.46342411637306213, 0.43915456533432007, 0.4158053398132324, 0.3911523222923279, 0.36435893177986145, 0.33733290433883667, 0.31331461668014526, 0.29129770398139954, 0.27140358090400696, 0.2523292005062103, 0.2353028506040573, 0.21995721757411957, 0.2060776799917221, 0.193739652633667, 0.18283230066299438, 0.17260991036891937, 0.16321681439876556, 0.1543746292591095, 0.14549219608306885, 0.13652540743350983, 0.12620332837104797, 0.11453572660684586, 0.10432291030883789, 0.09551700949668884, 0.08798553794622421, 0.08146537840366364]

# dataVar = d3d.readWaqMapDataAtVariable(ivar=ivar) # ok
# print dataVar[iseg][0][itime]
# # 0.503802478313
# # print dataVar[iseg][0][:]
# # [0.6013299822807312, 0.5702563524246216, 0.5401511788368225, 0.503802478313446, 0.4728724956512451, 0.4469988942146301, 0.4246392548084259, 0.4036324620246887, 0.3829262852668762, 0.3626249432563782, 0.3430309593677521, 0.3245018720626831, 0.3069453537464142, 0.2902730703353882, 0.2744538486003876, 0.2594083547592163, 0.24513202905654907, 0.23154398798942566, 0.2186923325061798, 0.20646995306015015, 0.19489523768424988, 0.1840439736843109, 0.17373421788215637, 0.1639062464237213, 0.15454551577568054, 0.14486530423164368, 0.13669444620609283, 0.1288989931344986, 0.12146954238414764, 0.11456318199634552, 0.10781973600387573, 0.10135664790868759, 0.0951852798461914, 0.08929856866598129, 0.08368173241615295, 0.07832273840904236, 0.073222316801548, 0.06838387995958328, 0.06380292028188705, 0.05946691334247589, 0.055361729115247726, 0.05147542431950569, 0.04776716232299805, 0.04426559433341026, 0.04097570851445198, 0.03788607567548752, 0.03498908132314682, 0.03228077292442322, 0.029757846146821976, 0.02741534821689129, 0.02524563856422901, 0.02323875017464161, 0.02135307528078556, 0.019624879583716393, 0.018043028190732002, 0.016590243205428123, 0.015253722667694092, 0.01402253657579422, 0.012886269949376583, 0.023018809035420418, 0.02688433788716793, 0.03349993750452995, 0.04440329968929291, 0.063551165163517, 0.10461793094873428, 0.19884467124938965, 0.4173647463321686, 0.3784586191177368, 0.3358108103275299, 0.28983786702156067, 0.2503114342689514, 0.2186971753835678, 0.19189321994781494, 0.16800573468208313, 0.14725902676582336, 0.12875454127788544, 0.11232475191354752, 0.09765993803739548, 0.08449932932853699, 0.0726800411939621, 0.06213885918259621, 0.052872687578201294, 0.044921666383743286, 0.03825629502534866, 0.032655809074640274, 0.02792053110897541, 0.023867949843406677, 0.046834155917167664, 0.08981742709875107, 0.1654300093650818, 0.31661030650138855, 0.4930227994918823, 0.6608158946037292, 0.8037514090538025, 0.9223926067352295, 1.0236036777496338, 1.1117881536483765, 1.189678430557251, 1.2595171928405762, 1.3232439756393433, 1.3821684122085571, 1.4369632005691528, 1.4864617586135864, 1.5311167240142822, 1.5720020532608032, 1.6040951013565063, 1.6301418542861938, 1.6491233110427856, 1.664941430091858, 1.6780588626861572, 1.6885061264038086, 1.6969019174575806, 1.7023577690124512, 1.7053660154342651, 1.7060858011245728, 1.704392910003662, 1.700285792350769, 1.6939176321029663, 1.651973009109497, 1.5950154066085815, 1.4950858354568481, 1.2635228633880615, 1.0112193822860718, 1.0640560388565063, 1.0983364582061768, 1.1183191537857056, 1.1274276971817017, 1.1283302307128906, 1.1231391429901123, 1.1134306192398071, 1.1003187894821167, 1.0845776796340942, 1.071732521057129, 1.0569288730621338, 1.0398000478744507, 1.0232192277908325, 1.010857105255127, 1.001200556755066, 0.9931233525276184, 0.6720030307769775, 0.4542151987552643, 0.31761711835861206, 0.22446410357952118, 0.15640205144882202, 0.10860186070203781, 0.07535219937562943, 0.05208498612046242, 0.03568442538380623, 0.024197984486818314, 0.016268528997898102, 0.010851454921066761, 0.00717611750587821, 0.004704298917204142, 0.0030468706972897053, 0.0019507224205881357, 0.0012362739071249962, 3.963619016333908e-11, -3.463514333191045e-15, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.2065401589221878e-11, 7.420708492134054e-11, 0.06161365285515785, 0.21908199787139893, 0.7319381237030029, 1.088305115699768, 1.313007116317749, 1.4052866697311401, 1.4776884317398071, 1.5313694477081299, 1.5641963481903076, 1.587206482887268, 1.6026510000228882, 1.6135740280151367, 1.6207910776138306, 1.6240403652191162, 1.6233066320419312, 1.6187620162963867, 1.610706090927124, 1.599424123764038, 1.5862804651260376, 1.5701651573181152, 1.5538867712020874, 1.5384687185287476, 1.5241055488586426, 1.5107810497283936, 1.4922434091567993, 1.473584771156311, 1.453205943107605, 1.429883360862732, 1.4027976989746094, 1.3792203664779663, 1.354729175567627, 1.328302025794983, 1.3013767004013062, 1.2753864526748657, 1.2511941194534302, 1.229217767715454, 1.2096147537231445, 1.1924583911895752, 1.1776680946350098, 1.1672425270080566, 1.1586486101150513, 1.151837706565857, 1.1471854448318481, 1.1450574398040771, 1.1454488039016724, 1.1484365463256836, 1.1538888216018677, 1.1616812944412231, 1.1714727878570557, 1.1829302310943604, 1.1966137886047363, 1.2104203701019287, 1.1923398971557617, 1.1756454706192017, 1.1350358724594116, 1.0604249238967896, 0.9322526454925537, 0.7734287977218628, 0.6368368864059448, 0.5196176767349243, 0.4249676465988159, 0.3563590347766876, 0.3079663813114166, 0.26941806077957153, 0.2372927963733673, 0.20986908674240112, 0.18318289518356323, 0.15814821422100067, 0.1377444565296173, 0.12073207646608353, 0.126420795917511, 0.21199306845664978, 0.286668986082077, 0.3499804735183716, 0.4058406949043274, 0.4543895125389099, 0.4989174008369446, 0.5378865003585815, 0.5391600131988525, 0.5518753528594971, 0.5574814677238464, 0.542118489742279, 0.5339130163192749, 0.520254909992218, 0.4890962541103363, 0.46342411637306213, 0.43915456533432007, 0.4158053398132324, 0.3911523222923279, 0.36435893177986145, 0.33733290433883667, 0.31331461668014526, 0.29129770398139954, 0.27140358090400696, 0.2523292005062103, 0.2353028506040573, 0.21995721757411957, 0.2060776799917221, 0.193739652633667, 0.18283230066299438, 0.17260991036891937, 0.16321681439876556, 0.1543746292591095, 0.14549219608306885, 0.13652540743350983, 0.12620332837104797, 0.11453572660684586, 0.10432291030883789, 0.09551700949668884, 0.08798553794622421, 0.08146537840366364]


dataZ = d3d.readWaqMapDataAtVariableTime(ivar=ivar,itime=itime) # ok

nrow = 0
ncol = 0
dx = 500.0 # meter
dy = 500.0 # meter
gridIndex = []
gridX = []
gridY = []
gridZ = []
with open('../../../examples/files/couplnef.txt') as f:
    for line in f:
        nrow += 1
        rowIndex = [int(elt.strip()) for elt in line.split('\t')]
        ncol = len(rowIndex)
        # in alternative, if you need to use the file content as numbers
        # inner_list = [int(elt.strip()) for elt in line.split(',')]
        gridIndex.append(rowIndex)
        gridX.append([i*dx if rowIndex[i]>0 else 0 for i in range(ncol)])
        gridY.insert(0,[(nrow-1)*dy for y in range(ncol)])
        gridZ.append([dataZ[rowIndex[i]][0] if rowIndex[i]>0 else 0 for i in range(ncol)])

import matplotlib.pyplot as plt
import numpy as np
gridZ = np.array(gridZ)
gridY = np.array(gridY)
gridX = np.array(gridX)

gridZ[gridX==0] = np.NaN
gridY[gridX==0] = np.NaN
gridX[gridX==0] = np.NaN

gridZ = np.ma.masked_invalid(gridZ)
gridY = np.ma.masked_invalid(gridY)
gridX = np.ma.masked_invalid(gridX)

# generate 2 2d grids for the x & y bounds
x = gridX
y = gridY
z = gridZ
z_min, z_max = np.nanmin(z), np.nanmax(z)

plt.pcolor(x, y, z, cmap='RdBu', vmin=z_min, vmax=z_max)
plt.axis([x.min(), x.max(), y.min(), y.max()])
plt.colorbar()
strHisTitle = icase+'_'+varlist[ivar]+'_s'+str(iseg)+'_t'+str(maptime[itime])
strMapTitle = icase+'_'+varlist[ivar]+'_map_t'+str(maptime[itime])
plt.title(strMapTitle)
plt.savefig(strMapTitle+'.png')
# plt.show()
plt.clf()

plt.plot(maptime,plotdata)
plt.xlabel('day')
plt.ylabel(varlist[ivar])
plt.title('Point '+str(iseg))
plt.savefig(strHisTitle+'.png')
# plt.show()
plt.clf()

# fig = plt.figure()
# ax = fig.add_subplot(111)
# ax.plot(maptime,plotdata)
# ax.grid()
# plt.show()

print 'end'